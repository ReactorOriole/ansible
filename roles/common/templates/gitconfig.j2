[alias]
    # Switch branches or restore working tree files
    co = checkout

    # List, create, or delete branches
    br = branch

    # Display the last commit from HEAD
    last = log -1 HEAD

    # Commit staged files with a given message
    cm = commit -m

    # View the current working tree status using the short format.
    s = status -s

    # View the current working tree status using the long format.
    st = status

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # View staged files
    staged = diff --cached

    # String replace in files within the git repo
    sed = ! git grep -z --full-name -l '.' | xargs -0 sed -i -e

    # View abbreviated SHA, description, and history graph, similar to l
    hist = log --pretty=format:"%C(auto)%h %ad | %s%d [%an]" --graph --date=short

    # View abbreviated SHA, date, description, history graph, and author
    oneline = log --pretty=format:"%C(auto)%h %ad%x20%s%x20%x28%an%x29" --date=short

    # View date and abbreviated SHA for commits
    current = log --pretty=format:"%C(auto)%ad %h %d" --abbrev-commit --date=short

    # View the latest local commit
    cur = log --pretty=format:"%C(auto)%ad %h %d" --abbrev-commit --date=short -1

    # Show commits from all branches, using relative dates
    branches = log --graph --abbrev-commit --decorate --date=relative --format=format:"%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)" --all

    # Checkout a branch using fuzzy search
    fco = !git checkout "$(git branch --all | tr -d ' ' | cut -f 3 -d '/' | fzf)"

    # List aliases.
    aliases = config --get-regexp alias

    # Show the user email for the current repository.
    whoami = config user.email

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]
    # Show most recently changed branches first.
    sort = -committerdate

[core]
    # Use git-delta as the default pager
	pager = delta

    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Default editor to vim
    editor = vim

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[interactive]
    # Color and highlight hunk lines according to your delta configuration
    diffFilter = delta --color-only

[delta]
    # Allows the use of n and N to move between diff sections
    navigate = true

	# Set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	light = false

    # Show line numbers
	line-numbers = true

[merge]
    # Display diffs between the ancestral commit and each of the two merge parents
    conflictstyle = diff3


[include]
    # Pull in delta themes
    path = {{ user_data_dir }}/delta-themes.gitconfig

    # Pull in personal gitconfig
    path = {{ user_config_dir }}/gitconfig/personal

[includeIf "gitdir:~/workplace/"]
  path = {{ user_config_dir }}/gitconfig/amazon

[color]
    # This is the default since Git 1.8.4
    ui = auto

[diff]
    # Detect copies as well as renames
    renames = copies

    # Use a sensible colorMoved option for lines of code that have moved
	colorMoved = default

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[init]
    defaultBranch = main

[push]
    autoSetupRemote = true
